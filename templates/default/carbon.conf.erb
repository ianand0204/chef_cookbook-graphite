[cache]
LOCAL_DATA_DIR = <%= @storage_dir %>/whisper/

# Specify the user to drop privileges to
# If this is blank carbon runs as the user that invokes it
# This user must have write access to the local data directory
USER =

# Limit the size of the cache to avoid swapping or becoming CPU bound.
# Sorts and serving cache queries gets more expensive as the cache grows.
# Use the value "inf" (infinity) for an unlimited cache size.
MAX_CACHE_SIZE = <%= @max_cache_size %>

# Limits the number of whisper update_many() calls per second, which effectively
# means the number of write requests sent to the disk. This is intended to
# prevent over-utilizing the disk and thus starving the rest of the system.
# When the rate of required updates exceeds this, then carbon's caching will
# take effect and increase the overall throughput accordingly.
MAX_UPDATES_PER_SECOND = <%= @max_updates_per_second %>

# Softly limits the number of whisper files that get created each minute.
# Setting this value low (like at 50) is a good way to ensure your graphite
# system will not be adversely impacted when a bunch of new metrics are
# sent to it. The trade off is that it will take much longer for those metrics'
# database files to all get created and thus longer until the data becomes usable.
# Setting this value high (like "inf" for infinity) will cause graphite to create
# the files quickly but at the risk of slowing I/O down considerably for a while.
MAX_CREATES_PER_MINUTE = <%= @max_creates_per_second %>

LINE_RECEIVER_INTERFACE = <%= @line_receiver_interface %>
PICKLE_RECEIVER_INTERFACE = <%= @pickle_receiver_interface %>
CACHE_QUERY_INTERFACE = <%= @cache_query_interface %>

<% if @cache_instances > 1 %>
LINE_RECEIVER_PORT = <%= @line_receiver_port+10 %>
PICKLE_RECEIVER_PORT = <%= @pickle_receiver_port+10 %>
CACHE_QUERY_PORT = <%= @cache_query_port+10 %>
<% else %>
LINE_RECEIVER_PORT = <%= @line_receiver_port %>
PICKLE_RECEIVER_PORT = <%= @pickle_receiver_port %>
CACHE_QUERY_PORT = <%= @cache_query_port %>
<% end %>

# By default, carbon-cache will log every whisper update. This can be excessive and
# degrade performance if logging on the same volume as the whisper data is stored.
LOG_UPDATES = <%= @log_whisper_updates %>


# Enable AMQP if you want to receve metrics using an amqp broker
<% if @enable_amqp %>
ENABLE_AMQP = True
<% else %>
# ENABLE_AMQP = False
<% end %>

# Verbose means a line will be logged for every metric received
# useful for testing
# AMQP_VERBOSE = False

<% if @enable_amqp %>
AMQP_HOST = <%= @amqp_host %>
AMQP_PORT = <%= @amqp_port %>
AMQP_VHOST = <%= @amqp_vhost %>
AMQP_USER = <%= @amqp_user %>
AMQP_PASSWORD = <%= @amqp_password %>
AMQP_EXCHANGE = <%= @amqp_exchange %>
AMQP_METRIC_NAME_IN_BODY = <%= @amqp_metric_name_in_body ? "True" : "False" %>
<% else %>
# AMQP_HOST = localhost
# AMQP_PORT = 5672
# AMQP_VHOST = /
# AMQP_USER = guest
# AMQP_PASSWORD = guest
# AMQP_EXCHANGE = graphite
<% end %>

<%
if @cache_instances > 1
  index = 'a'
  (@cache_instances-1).times do |i|
    index = index.next
-%>
[cache:<%= index %>]
LINE_RECEIVER_PORT = <%= @line_receiver_port+(10*(i+2)) %>
PICKLE_RECEIVER_PORT = <%= @pickle_receiver_port+(10*(i+2)) %>
CACHE_QUERY_PORT = <%= @cache_query_port+(10*(i+2)) %>
<%
  end
end
-%>

# Patterns for all of the metrics this machine will store. Read more at
# http://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol#Bindings
#
# Example: store all sales, linux servers, and utilization metrics
# BIND_PATTERNS = sales.#, servers.linux.#, #.utilization
#
# Example: store everything
# BIND_PATTERNS = #

# NOTE: you cannot run both a cache and a relay on the same server
# with the default configuration, you have to specify a distinict
# interfaces and ports for the listeners.

<% if @cache_instances > 1 %>
[relay]
LINE_RECEIVER_INTERFACE = <%= @relay_line_receiver_interface %>
LINE_RECEIVER_PORT = <%= @relay_line_receiver_port %>
PICKLE_RECEIVER_INTERFACE = <%= @relay_pickle_receiver_interface %>
PICKLE_RECEIVER_PORT = <%= @relay_pickle_receiver_port %>

MAX_DATAPOINTS_PER_MESSAGE = <%= @relay_max_datapoints_per_message %>
USE_FLOW_CONTROL = <%= @relay_use_flow_control ? 'True' : 'False' %>
RELAY_METHOD = <%= @relay_relay_method %>
<%
hosts = []
index = 'a'
@cache_instances.times do |i|
  hosts << "127.0.0.1:#{@pickle_receiver_port+(10*(i+1))}:#{index}"
  index=index.next
end
hosts = hosts.join(', ')
-%>
DESTINATIONS = <%= hosts %>
CH_HOST_LIST = <%= hosts %>
MAX_QUEUE_SIZE = <%= @relay_max_queue_size %>
<% end %>
<%
if @relay_instances > 1
  index = 'a'
  (@relay_instances).times do |i|
-%>
[relay:<%= index %>]
LINE_RECEIVER_INTERFACE = <%= "127.0.2.#{1+i}" %>
LINE_RECEIVER_PORT = <%= @relay_line_receiver_port+10 %>
PICKLE_RECEIVER_INTERFACE = <%= "127.0.2.#{1+i}" %>
PICKLE_RECEIVER_PORT = <%= @relay_pickle_receiver_port+10 %>
<%
    index = index.next
  end
end
-%>

<% if @ha_relay_enable %>
<%
if @ha_relay_instances > 1
  index = 'a'
  (@ha_relay_instances).times do |j|
-%>
[relay:ha-<%= index %>]
RELAY_METHOD = rules
LINE_RECEIVER_INTERFACE = <%= "127.0.1.#{1+j}" %>
LINE_RECEIVER_PORT = <%= @ha_relay_line_receiver_port+10 %>
PICKLE_RECEIVER_INTERFACE = <%= "127.0.1.#{1+j}" %>
PICKLE_RECEIVER_PORT = <%= @ha_relay_pickle_receiver_port+10 %>
DESTINATIONS = <%= @ha_relay_servers.join(', ') %>
MAX_QUEUE_SIZE = <%= @ha_relay_max_queue_size %>
<%
    index = index.next
  end
else
%>
[relay:ha]
RELAY_METHOD = rules
LINE_RECEIVER_PORT = <%= @ha_relay_line_receiver_port %>
PICKLE_RECEIVER_PORT = <%= @ha_relay_pickle_receiver_port %>
DESTINATIONS = <%= @ha_relay_servers.join(', ') %>
MAX_QUEUE_SIZE = <%= @ha_relay_max_queue_size %>
<%
end
-%>
<% end %>
